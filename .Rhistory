10-2
10-2
2+10/5
num1 <-  42
Sentence <- "Hello World"
round(num1)
?round
round(num1, 6)
?c
ages
ages <-  c(4, 10, 2, NA, 3)
ages
ages * 7
diverse <- c(1, 2.5, "Hi!")
barplot(ages)
?barplot
?barplot
barplot(ages, col = c("blue", "green"))
barplot(ages, col = c("blue", "green", "red", 'purple'))
ages1 <-  c(4, 10, 2, 8, 3)
barplot(ages)
barplot(ages, col = c("blue", "green", "red", 'purple'))
ages<-  c(4, 10, 2, 8, 3)
barplot(ages, col = c("blue", "green", "red", 'purple'))
barplot(ages, col = c("blue", "green", "red", 'purple', "pink"))
rep.int(
)
rep.int()
?rep.int()
rep.int(ages)
rep.int(ages, 3)
rep.int(ages1, 3)
mean (ages)
average(ages)
?average
mean(ages1)
ages1 <-  c(4, 10, 2, NA, 3)
mean(ages1)
mean(ages1, na.rm = TRUE)
ages[2]
ages1[2]
ages1[4]
ages2 <- ages1[-4]
ls()
rm(list=ls(()))
rm(list=ls(()))
rm(list=ls(()))
rm (list=ls(()))
rm (list=ls())
version
if(!require(installr)) {
install.packages("installr"); require(installr)}
# using the package:
updateR()
install.packages("htmltools", type = "source")
if(!require(installr)) {
install.packages("installr"); require(installr)}
# using the package:
updateR()
version
install.packages("htmltools", type = "source")
Sys.which("make")
Sys.which("make")
version
library(tidyverse)
setwd("D:/Cell-Culture-Media-Analysis")
library(pheatmap)
library(vsn)
library(patchwork)
library(naniar)
library(simputation)
df_pos <- read.csv("Data/POS_Height_1_2024_09_24_05_19_14.csv", stringsAsFactors = FALSE)
df_run <- df_pos %>%
filter(Metabolite.name != "Unknown",
!grepl("no MS2:", Metabolite.name),
MS.MS.matched != "FALSE")
colnames(df_run)
df_run_selected <- df_run %>%
select(Average.Rt.min., Metabolite.name,
starts_with("X240830_1137_hydrolysates_blank"),
starts_with("X240830_1137_hydrolysates_pool"),
starts_with("sample") & ends_with("_sb.cn.pos_dda1"))
colnames(df_run_selected)
sample_names <- read.csv("Data/Sample_Names.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(sample_names) <- c("Original", "Renamed")  # Assign meaningful column names
rename_lookup <- setNames(sample_names$Renamed, sample_names$Original)
df_run_selected <- df_run_selected %>%
rename_with(~ rename_lookup[gsub("_sb.cn.pos_dda1", "", .x)], .cols = contains("sample"))
df_run_selected <- df_run_selected %>%
rename(
Blank_1 = X240830_1137_hydrolysates_blank_sb.cn.pos_dda1,
Blank_2 = X240830_1137_hydrolysates_blank_sb.cn.pos_dda2,
Blank_3 = X240830_1137_hydrolysates_blank_sb.cn.pos_dda3,
Blank_4 = X240830_1137_hydrolysates_blank_sb.cn.pos_dda4,
Pool_1 = X240830_1137_hydrolysates_pool_sb.cn.pos_dda1,
Pool_2 = X240830_1137_hydrolysates_pool_sb.cn.pos_dda2
)
colnames(df_run_selected) <- trimws(colnames(df_run_selected))
colnames(df_run_selected)
df_run_selected_long <- df_run_selected %>%
pivot_longer(
cols = -c(Average.Rt.min., Metabolite.name), # Exclude metadata columns
names_to = "Samples",
values_to = "Area"
)
ggplot(df_run_selected_long, aes(x = Samples, y = Area)) +
geom_boxplot() +
geom_jitter(width=0.15)+
theme(axis.text.x = element_text(angle = 90))+
labs(x = "Samples", y = "Area", title = "Box Plot of Area by Sample")
ggplot(df_run_selected_long, aes(x = Samples, y = log(Area))) +
geom_boxplot() +
geom_jitter(width = 0.15, alpha = 0.5) +  # Added alpha for better visualization of points
theme(axis.text.x = element_text(angle = 90))+
labs(x = "Samples", y = "Log10(Area)", title = "Box Plot of Log-Transformed Area by Sample")
df_pca_data <- df_run_selected %>%
select(-Average.Rt.min., -Metabolite.name) %>%
t() %>%
as.data.frame()
df_pca_data_scaled <- scale(df_pca_data)
pca_result <- prcomp(df_pca_data_scaled, center = TRUE, scale. = TRUE)
sample_names <- rownames(df_pca_data)
group_names <- str_extract(sample_names, "^[^_]+")  # Extract the part before "_"
pca_data <- data.frame(Sample = sample_names,
Group = group_names,
PC1 = pca_result$x[,1],
PC2 = pca_result$x[,2])
ggplot(pca_data, aes(x = PC1, y = PC2, color = Group, label = Sample)) +
geom_point(size = 3) +
labs(title = "PCA Plot of Samples by Group", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
theme(legend.position = "right")
# Calculate missing value percentage for each sample
missing_percentage <- df_run_selected %>%
select(-Average.Rt.min., -Metabolite.name) %>%  # Exclude metadata columns
summarise(across(everything(), ~ mean(is.na(.) | . == 0) * 100)) %>%  # Calculate percentage of missing values
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Missing_Percentage")  # Convert to long format
ggplot(missing_percentage, aes(x = Sample, y = Missing_Percentage)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Missing Value Percentage by Sample",
x = "Sample Names",
y = "Missing Value Percentage (%)")
sample_mv_columns <- names(df_run_selected)[!(names(df_run_selected) %in% c("Average.Rt.min.", "Metabolite.name", "Blank_1", "Blank_2", "Blank_3", "Blank_4", "Pool_1", "Pool_2"))]
df_mv_handle_long <- df_run_selected %>%
pivot_longer(cols = all_of(sample_mv_columns),
names_to = "Sample",
values_to = "Area") %>%
mutate(Group = sub("_\\d+$", "", Sample),       # Extract the base sample group name (everything before the last underscore and digit)
Replicate = as.numeric(sub(".*_", "", Sample))  # Extract replicate number (the last number after the underscore)
)
df_group_counts <- df_mv_handle_long %>%
group_by(Metabolite.name, Group) %>%
summarise(NonMissingCount = sum(!is.na(Area)), .groups = "drop")
metabolites_to_keep <- df_group_counts %>%
filter(NonMissingCount >= 2) %>%
pull(Metabolite.name) %>%
unique()  # Unique list of metabolites that meet the criteria
df_filtered <- df_run_selected %>%
filter(Metabolite.name %in% metabolites_to_keep)
metabolite_counts <- df_filtered %>%
select(-Average.Rt.min., -Metabolite.name) %>%
summarise(across(everything(), ~ sum(!is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Count")
ggplot(metabolite_counts, aes(x = Sample, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Number of Identified Metabolites per Sample", x = "Sample", y = "Count of Identified Metabolites")
missing_matrix <- df_filtered %>%
select(-Average.Rt.min., -Metabolite.name) %>%
mutate(across(everything(), ~ ifelse(. == 0, 1, 0))) %>%  # Mark 0 as missing (1), others as present (0)
as.matrix()
# Double-check the binary matrix for any missing values represented as 1
table(missing_matrix)
# Define color and breaks explicitly for binary data
color_palette <- c("white", "black")
breaks <- c(-0.5, 0.5, 1.5)
# Plot the heatmap
pheatmap(missing_matrix,
cluster_rows = TRUE,
cluster_cols = TRUE,
color = color_palette,
breaks = breaks,
show_rownames = FALSE,
show_colnames = TRUE,
main = "Heatmap of Missing Values Across Metabolites and Samples")
df_temp <- df_filtered %>%
mutate(across(everything(), ~ ifelse(. == 0, NA, .)))
vis_miss(df_temp, cluster = TRUE)  # Visualize clustered missing values
# Upset plot for missing data combinations
gg_miss_upset(df_temp)
# Group-wise missingness summary
missing_summary <- df_temp %>%
pivot_longer(cols = -c(Average.Rt.min., Metabolite.name), names_to = "Sample", values_to = "Value") %>%
mutate(Type = case_when(
grepl("Blank", Sample) ~ "Blank",
grepl("Pool", Sample) ~ "Pool",
TRUE ~ "Sample"
)) %>%
group_by(Type, Sample) %>%
summarise(Missing_Percentage = mean(is.na(Value)) * 100, .groups = "drop")
# Plot missingness percentages by groups
ggplot(missing_summary, aes(x = Sample, y = Missing_Percentage, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Missingness by Group and Sample",
x = "Sample Names",
y = "Missing Value Percentage (%)")
# Count the occurrences of each type of "missing" value in df_run_selected
missing_summary <- df_run_selected %>%
summarise(
Total_Zero = sum(across(where(is.numeric), ~ sum(. == 0, na.rm = TRUE))),
Total_NA = sum(is.na(.)),
Total_NaN = sum(across(where(is.numeric), ~ sum(is.nan(.))))
)
# Display the summary of missing values
print(missing_summary)
# Calculate the average of blank intensities
df_with_blank_avg <- df_filtered %>%
rowwise() %>%
mutate(Average_Blank = mean(c_across(starts_with("Blank_")), na.rm = TRUE))
# Step 2: Subtract Blank Values from Samples
# Define the sample columns (exclude metadata and blank columns)
sample_columns <- setdiff(names(df_with_blank_avg),
c("Metabolite.name", "Average.Rt.min.",
"Blank_1", "Blank_2", "Blank_3", "Blank_4", "Pool_1", "Pool_2", "Average_Blank"))
# Subtract blanks and replace negatives with NA
df_blank_corrected <- df_with_blank_avg %>%
mutate(across(all_of(sample_columns), ~ ifelse((. - Average_Blank) < 0, NA, . - Average_Blank))) %>%
select(-starts_with("Blank_"), -starts_with("Pool_"), -Average_Blank)  # Drop Blank, Pool, and Average_Blank columns
# Identify metabolites with >20% zero values in samples
metabolites_to_keep <- df_blank_corrected %>%
select(-Metabolite.name, -Average.Rt.min.) %>%
summarise(across(everything(), ~ mean(. == 0, na.rm = TRUE))) %>%
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Zero_Percentage") %>%
filter(Zero_Percentage <= 0.20) %>%
pull(Sample)
# Filter the dataset to keep only those metabolites
df_filtered_80 <- df_blank_corrected %>%
select(Metabolite.name, Average.Rt.min., all_of(metabolites_to_keep))
# Identify the smallest non-zero value in the dataset
min_nonzero <- df_blank_corrected %>%
select(-Metabolite.name, -Average.Rt.min.) %>%
unlist() %>%
.[. > 0] %>%
min(na.rm = TRUE)
# Add a small constant (e.g., 10% of the smallest non-zero value)
k <- min_nonzero * 0.1
# Apply log transformation with the constant
df_log_transformed <- df_blank_corrected %>%
mutate(across(where(is.numeric), ~ log(. + k)))
# Convert data to long format for easier visualization
df_long_log <- df_log_transformed %>%
pivot_longer(cols = -c(Metabolite.name, Average.Rt.min.), names_to = "Sample", values_to = "Log_Area")
# Plot histogram of log-transformed values
ggplot(df_long_log, aes(x = Log_Area)) +
geom_histogram(bins = 50, fill = "skyblue", color = "black") +
labs(title = "Distribution of Log-Transformed Metabolite Areas",
x = "Log(Area + k)", y = "Frequency") +
theme_minimal()
