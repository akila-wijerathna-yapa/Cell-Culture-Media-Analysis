# Extract sample names and group by ignoring replicate numbers
sample_names <- rownames(df_neg_pca_data)
group_names <- str_extract(sample_names, "^[^_]+")  # Extract the part before "_"
# Create a data frame with PCA results and group labels
pca_neg_data <- data.frame(Sample = sample_names,
Group = group_names,
PC1 = pca_neg_result$x[,1],
PC2 = pca_neg_result$x[,2])
# Define custom colors
solid_colors <- c("#7F7F7F","#DBDB8D" , "#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9467BD", "#8C564B", "#E377C2", "#7F7F7F", "#BCBD22")
group_colors <- setNames(solid_colors, unique(pca_neg_data$Group))
# Load ggrepel
library(ggrepel)
# Plot the PCA results with labels and custom colors
pca_plot <- ggplot(pca_neg_data, aes(x = PC1, y = PC2, color = Group, label = Sample)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 20, box.padding = 0.5, point.padding = 0.5) +  # Add non-overlapping labels
scale_color_manual(values = group_colors) +  # Use custom colors
labs(
title = "PCA Plot of Samples by Group",
x = paste0("Principal Component 1 (", pc1_var, "%)"),
y = paste0("Principal Component 2 (", pc2_var, "%)"),
color = "Group"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5)
)
# Display the plot
print(neg_pca_plot)
# Plot the PCA results with labels and custom colors
pca_plot <- ggplot(pca_neg_data, aes(x = PC1, y = PC2, color = Group, label = Sample)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 20, box.padding = 0.5, point.padding = 0.5) +  # Add non-overlapping labels
scale_color_manual(values = group_colors) +  # Use custom colors
labs(
title = "PCA Plot of Samples by Group",
x = paste0("Principal Component 1 (", pc1_var, "%)"),
y = paste0("Principal Component 2 (", pc2_var, "%)"),
color = "Group"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5)
)
# Plot the PCA results with labels and custom colors
neg_pca_plot <- ggplot(pca_neg_data, aes(x = PC1, y = PC2, color = Group, label = Sample)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 20, box.padding = 0.5, point.padding = 0.5) +  # Add non-overlapping labels
scale_color_manual(values = group_colors) +  # Use custom colors
labs(
title = "PCA Plot of Samples by Group",
x = paste0("Principal Component 1 (", pc1_var, "%)"),
y = paste0("Principal Component 2 (", pc2_var, "%)"),
color = "Group"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5)
)
# Display the plot
print(neg_pca_plot)
# Save the plot as high-resolution JPEG and PDF
ggsave("PCA_Plot_neg.pdf", plot = neg_pca_plot, device = "pdf", width = 10, height = 8, dpi = 300)
ggsave("PCA_Plot_neg.jpeg", plot = neg_pca_plot, device = "jpeg", width = 10, height = 8, dpi = 300)
# Print confirmation
print("PCA plot saved successfully as PDF and JPEG.")
# Display the plot
print(pos_pca_plot)
# Plot the PCA results with labels and custom colors
pos_pca_plot <- ggplot(pca_pos_data, aes(x = PC1, y = PC2, color = Group, label = Sample)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 20, box.padding = 0.5, point.padding = 0.5) +  # Add non-overlapping labels
scale_color_manual(values = group_colors) +  # Use custom colors
labs(
title = "PCA Plot of Samples by Group",
x = paste0("Principal Component 1 (", pc1_var, "%)"),
y = paste0("Principal Component 2 (", pc2_var, "%)"),
color = "Group"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5)
)
# Display the plot
print(pos_pca_plot)
# Save the plot as high-resolution JPEG and PDF
ggsave("PCA_Plot_Pos.pdf", plot = pos_pca_plot, device = "pdf", width = 10, height = 8, dpi = 300)
ggsave("PCA_Plot_Pos.jpeg", plot = pos_pca_plot, device = "jpeg", width = 10, height = 8, dpi = 300)
# Print confirmation
print("PCA plot saved successfully as PDF and JPEG.")
# Calculate missing value percentage for each sample
neg_missing_percentage <- df_neg_run_selected %>%
select(-Average.Rt.min., -Adduct.type, -Metabolite.name) %>%  # Exclude metadata columns
summarise(across(everything(), ~ mean(is.na(.) | . == 0) * 100)) %>%  # Calculate percentage of missing values
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Missing_Percentage")  # Convert to long format
ggplot(neg_missing_percentage, aes(x = Sample, y = Missing_Percentage)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Missing Value Percentage by Sample",
x = "Sample Names",
y = "Missing Value Percentage (%)")
neg_sample_mv_columns <- names(df_neg_run_selected)[!(names(df_neg_run_selected) %in% c("Average.Rt.min.", "Adduct.type", "Metabolite.name", "Blank_1", "Pool_1", "Pool_2"))]
df_neg_mv_handle_long <- df_neg_run_selected %>%
pivot_longer(cols = all_of(neg_sample_mv_columns),
names_to = "Sample",
values_to = "Area") %>%
mutate(Group = sub("_\\d+$", "", Sample),       # Extract the base sample group name (everything before the last underscore and digit)
Replicate = as.numeric(sub(".*_", "", Sample))  # Extract replicate number (the last number after the underscore)
)
df_neg_mv_handle_long <- df_neg_run_selected %>%
pivot_longer(cols = all_of(neg_sample_mv_columns),
names_to = "Sample",
values_to = "Area") %>%
mutate(Group = sub("_\\d+$", "", Sample),       # Extract the base sample group name (everything before the last underscore and digit)
Replicate = as.numeric(sub(".*_", "", Sample))  # Extract replicate number (the last number after the underscore)
)
df_neg_group_counts <- df_neg_mv_handle_long %>%
group_by(Metabolite.name, Group) %>%
summarise(NonMissingCount = sum(!is.na(Area)), .groups = "drop")
neg_metabolites_to_keep <- df_neg_group_counts %>%
filter(NonMissingCount >= 2) %>%
pull(Metabolite.name) %>%
unique()  # Unique list of metabolites that meet the criteria
df_neg_filtered <- df_neg_run_selected %>%
filter(Metabolite.name %in% neg_metabolites_to_keep)
neg_metabolite_counts <- df_neg_filtered %>%
select(-Average.Rt.min., -Adduct.type, -Metabolite.name) %>%
summarise(across(everything(), ~ sum(!is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Count")
ggplot(neg_metabolite_counts, aes(x = Sample, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Number of Identified Metabolites per Sample", x = "Sample", y = "Count of Identified Metabolites")
neg_missing_matrix <- df_neg_filtered %>%
select(-Average.Rt.min., -Adduct.type, -Metabolite.name) %>%
mutate(across(everything(), ~ ifelse(. == 0, 1, 0))) %>%  # Mark 0 as missing (1), others as present (0)
as.matrix()
# Double-check the binary matrix for any missing values represented as 1
table(neg_missing_matrix)
# Define color and breaks explicitly for binary data
color_palette <- c("white", "black")
breaks <- c(-0.5, 0.5, 1.5)
# Plot the heatmap
pheatmap(neg_missing_matrix,
cluster_rows = TRUE,
cluster_cols = TRUE,
color = color_palette,
breaks = breaks,
show_rownames = FALSE,
show_colnames = TRUE,
main = "Heatmap of Missing Values Across Metabolites and Samples")
df_neg_temp <- df_neg_filtered %>%
mutate(across(everything(), ~ ifelse(. == 0, NA, .)))
vis_miss(df_neg_temp, cluster = TRUE)  # Visualize clustered missing values
# Upset plot for missing data combinations
gg_miss_upset(df_neg_temp)
# Calculate the average of blank intensities
df_neg_with_blank_avg <- df_neg_filtered %>%
rowwise() %>%
mutate(Average_Blank = mean(c_across(starts_with("Blank_")), na.rm = TRUE))
# Step 2: Subtract Blank Values from Samples
# Define the sample columns (exclude metadata and blank columns)
sample_columns <- setdiff(names(df_neg_with_blank_avg),
c("Metabolite.name", "Adduct.type", "Average.Rt.min.", "Blank_1", "Pool_1", "Pool_2", "Average_Blank"))
# Subtract blanks and replace negatives with zero
df_neg_blank_corrected <- df_neg_with_blank_avg %>%
mutate(across(all_of(sample_columns), ~ ifelse((. - Average_Blank) < 0, 0, . - Average_Blank))) %>%
select(-starts_with("Blank_"), -starts_with("Pool_"), -Average_Blank)  # Drop Blank, Pool, and Average_Blank columns
################################################################################
# Check for any negative values across numeric columns
any_negative <- any(df_neg_blank_corrected %>%
select(where(is.numeric)) %>%
unlist() < 0, na.rm = TRUE)
# Print result
if (any_negative) {
print("There are negative values in the dataframe.")
} else {
print("No negative values found in the dataframe.")
}
# Identify metabolites with >20% zero values in samples
neg_metabolites_to_keep <- df_neg_blank_corrected %>%
select(-Metabolite.name, -Adduct.type, -Average.Rt.min.) %>%
summarise(across(everything(), ~ mean(. == 0, na.rm = TRUE))) %>%
pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Zero_Percentage") %>%
filter(Zero_Percentage <= 0.20) %>%
pull(Sample)
# Filter the dataset to keep only those metabolites
df_neg_filtered_80 <- df_neg_blank_corrected %>%
select(Metabolite.name,
Adduct.type,
Average.Rt.min.,
all_of(neg_metabolites_to_keep))
################################################################################
## Visualize missing values
# Prepare the dataset for heatmap
# Remove metadata columns (Metabolite.name, Average.Rt.min.)
neg_heatmap_data <- df_neg_filtered_80 %>%
select(-Metabolite.name, -Adduct.type, -Average.Rt.min.)
# Create a binary-like matrix for coloring: 0 stays as 0, all other values become 1
neg_binary_heatmap_data <- neg_heatmap_data %>%
mutate(across(everything(), ~ ifelse(. == 0, 0, 1))) %>%
as.matrix()
# Define color palette and breaks for binary data
color_palette <- c("black", "lightblue") # Black for 0, light blue for all other values
breaks <- c(-0.5, 0.5, 1.5) # Ensure two distinct bins: 0 and non-zero values
# Plot the heatmap
pheatmap(
neg_binary_heatmap_data,
cluster_rows = TRUE,
cluster_cols = TRUE,
color = color_palette,
breaks = breaks,
main = "Two-Color Heatmap of Zero Patterns in df_filtered_80",
show_rownames = FALSE,
show_colnames = TRUE
)
# Step 1: Identify the second smallest non-zero value
# Flatten all numeric data, filter out zeros, and get the second smallest value
neg_non_zero_values <- df_neg_filtered_80 %>%
select(where(is.numeric)) %>%
unlist() %>%
.[. > 0] %>%           # Keep only non-zero values
sort()
neg_second_min_value <- unique(neg_non_zero_values)[2]  # The second smallest non-zero value
# Print the second smallest non-zero value
print(paste("The second smallest non-zero value is:", neg_second_min_value))
# Step 2: Replace zeros with random values between 1 and the second smallest non-zero value
set.seed(141222)  # Set seed for reproducibility
df_neg_zero_imputed <- df_neg_filtered_80 %>%
mutate(across(where(is.numeric), ~ ifelse(. == 0,                                             runif(1, min = 1, max = neg_second_min_value), .)))
# Step 3: Verify the replacement of zeros
# Count zeros before and after imputation
neg_zeros_before <- sum(df_neg_filtered_80 == 0, na.rm = TRUE)
neg_zeros_after <- sum(df_neg_zero_imputed == 0, na.rm = TRUE)
print(paste("Number of zeros before imputation:", neg_zeros_before))
print(paste("Number of zeros after imputation:", neg_zeros_after))
# Perform TIC normalization using the method = "sum"
neg_norm_TIC <- normalization(df_neg_zero_imputed %>% select(-Metabolite.name, -Adduct.type, -Average.Rt.min.), method = "sum")$newXtrain
# Combine normalized data with metadata
df_neg_TIC_normalized <- cbind(
df_neg_zero_imputed %>% select(Metabolite.name, Adduct.type , Average.Rt.min.),
as.data.frame(neg_norm_TIC)
)
# Verify the sums of each sample
neg_TIC_after <- colSums(df_neg_TIC_normalized %>% select(-Metabolite.name, -Adduct.type, -Average.Rt.min.))
print("TIC values after normalization (should be ~1):")
print(neg_TIC_after)
# Check for NAs
print(paste("Number of NA values in Normalized data:", sum(is.na(neg_norm_TIC) == TRUE)))
df_neg_normalized <- df_neg_TIC_normalized
write.csv( df_neg_normalized, "df_neg_normalized.csv")
# Check for any negative values across numeric columns
any_negative <- any(df_neg_normalized  %>%
select(where(is.numeric)) %>%
unlist() < 0, na.rm = TRUE)
# Print result
if (any_negative) {
print("There are negative values in the dataframe.")
} else {
print("No negative values found in the dataframe.")
}
# Combine the two data frames
df_combined <- rbind(df_neg_normalized, df_pos_normalized)
# Check the combined data frame
print(dim(df_combined))  # Check dimensions (rows and columns)
head(df_combined)        # Preview the first few rows
# Select numeric data (exclude metadata)
df_combined_scaled <- df_combined %>%
select(-Metabolite.name, -Adduct.type, -Average.Rt.min.) %>%
scale() %>%
as.data.frame()
# Select numeric data (exclude metadata)
df_combined_scaled <- df_combined %>%
select(-Metabolite.name, -Adduct.type, -Average.Rt.min.) %>%
scale() %>%
as.data.frame()
# Combine scaled data with metadata
df_combined_scaled <- cbind(
df_combined %>% select(Metabolite.name, Adduct.type, Average.Rt.min.),
df_combined
)
# Check scaling results
summary(df_combined_scaled %>% select(-Metabolite.name, -Adduct.type, -Average.Rt.min.))
# Prepare data for PCA (exclude metadata)
df_combined_scaled_pca_data <- df_combined_scaled %>%
select(-Metabolite.name, -Adduct.type, -Average.Rt.min.) %>%
t() %>%
as.data.frame()
# Assign rownames to the PCA data
rownames(df_combined_scaled_pca_data) <- colnames(df_pos_normalized %>% select(-Metabolite.name,-Adduct.type, -Average.Rt.min.))
# Prepare data for PCA (exclude metadata)
df_combined_scaled_pca_data <- df_combined_scaled %>%
select(-Metabolite.name, -Adduct.type, -Average.Rt.min.) %>%
t() %>%
as.data.frame()
# Assign rownames to the PCA data
rownames(df_combined_scaled_pca_data) <- colnames(df_pos_normalized %>% select(-Metabolite.name,-Adduct.type, -Average.Rt.min.))
# Perform PCA on scaled data
df_combined_scaled_pca_data_result <- prcomp(df_combined_scaled_pca_data, center = FALSE, scale. = FALSE)
# Create a data frame for plotting PCA results
df_combined_scaled_pca_data <- as.data.frame(df_combined_scaled_pca_data_result$x[, 1:2])  # Extract PC1 and PC2
df_combined_scaled_pca_data$Group <- sapply(rownames(df_combined_scaled_pca_data), function(x) strsplit(x, "_")[[1]][1])
df_combined_scaled_pca_data$Sample <- rownames(df_combined_scaled_pca_data)
# Predefined solid colors for 9 groups
combined_solid_colors <- c(
"#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9467BD",
"#8C564B", "#E377C2", "#7F7F7F", "#BCBD22"
)
# Dynamically map colors to groups
combined_group_colors <- setNames(solid_colors, unique(df_combined_scaled_pca_data$Group))
# Step 1: Calculate variance explained by each PC
combined_explained_variance <- df_combined_scaled_pca_data_result$sdev^2 / sum(pca_result$sdev^2)
# Step 1: Calculate variance explained by each PC
combined_explained_variance <- df_combined_scaled_pca_data_result$sdev^2 / sum(df_combined_scaled_pca_data_result$sdev^2)
combined_pc1_var <- round(explained_variance[1] * 100, 2)  # PC1 percentage
combined_pc2_var <- round(explained_variance[2] * 100, 2)  # PC2 percentage
combined_pca_plot <- ggplot(df_combined_scaled_pca_data, aes(x = PC1, y = PC2, color = Group, label = Sample)) +
geom_point(size = 4) +
geom_text_repel(size = 3, max.overlaps = 20, box.padding = 0.5, point.padding = 0.5) +
scale_color_manual(values = combined_group_colors) +
labs(
title = "PCA Plot with Percent Variance Explained",
x = paste0("Principal Component 1 (", pc1_var, "%)"),
y = paste0("Principal Component 2 (", pc2_var, "%)"),
color = "Group"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5)
)
# Print the PCA plot
print(combined_pca_plot)
# Save the PCA plot as PDF and JPEG
ggsave("Combined_PCA_Plot_Custom_Colors.pdf", plot = combined_pca_plot, device = "pdf", width = 10, height = 8, dpi = 300)
ggsave("Combined_PCA_Plot_Custom_Colors.jpeg", plot = combined_pca_plot, device = "jpeg", width = 10, height = 8, dpi = 300)
# Extract numeric data for heatmap
combined_heatmap_data <- df_combined_scaled %>% select(-Metabolite.name,-Adduct.type, -Average.Rt.min.) %>% as.matrix()
color_palette <- colorRampPalette(c( "#A6CEE3" , "#33A02C", "#E31A1C"))(50)
pheatmap(
combined_heatmap_data,
cluster_rows = TRUE,    # Perform hierarchical clustering on rows (metabolites).
cluster_cols = TRUE,    # Perform hierarchical clustering on columns (samples).
color = color_palette,  # Apply the defined color palette.
main = "Heatmap of Scaled Data",  # Title of the heatmap.
show_rownames = FALSE,  # Optional: Hide row names (metabolites) to improve visualization.
show_colnames = TRUE    # Optional: Show column names (sample names).
)
# Step 1: Create a new column 'Metabolite.name.mod' by extracting text before the first ';'
df_combined_scaled_v2 <- df_combined_scaled %>%
mutate(Metabolite.name.mod = str_extract(Metabolite.name, "^[^;]+"))
View(df_combined_scaled)
View(df_combined)
str(df_combined)
str(df_combined_scaled)
df_scaled_numeric <- df_combined %>%
select(-Metabolite.name, -Adduct.type, -Average.Rt.min.) %>%
scale() %>%
as.data.frame()
# Combine the scaled numeric data with metadata
df_combined_scaled <- cbind(
df_combined %>% select(Metabolite.name, Adduct.type, Average.Rt.min.),
df_scaled_numeric
)
# Check the structure of the scaled data
str(df_combined_scaled)
# Check scaling results
summary(df_combined_scaled %>% select(-Metabolite.name, -Adduct.type, -Average.Rt.min.))
# Step 1: Create a new column 'Metabolite.name.mod' by extracting text before the first ';'
df_combined_scaled_v2 <- df_combined_scaled %>%
mutate(Metabolite.name.mod = str_extract(Metabolite.name, "^[^;]+"))
# Step 2: Group by 'Metabolite.name.mod' and calculate the average for all sample columns
df_combined_scaled_v2_averaged <- df_combined_scaled_v2 %>%
group_by(Metabolite.name.mod) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()
# Extract numeric data for heatmap
heatmap_data_v2 <- df_combined_scaled_v2_averaged %>% select(-Metabolite.name.mod, -Average.Rt.min.) %>% as.matrix()
color_palette <- colorRampPalette(c( "#A6CEE3" , "#33A02C", "#E31A1C"))(50)
pheatmap(
heatmap_data_v2,
cluster_rows = TRUE,    # Perform hierarchical clustering on rows (metabolites).
cluster_cols = TRUE,    # Perform hierarchical clustering on columns (samples).
color = color_palette,  # Apply the defined color palette.
main = "Heatmap of Scaled Data",  # Title of the heatmap.
show_rownames = FALSE,  # Optional: Hide row names (metabolites) to improve visualization.
show_colnames = TRUE    # Optional: Show column names (sample names).
)
# Step 1: Create a new column 'Metabolite.name.mod' by extracting text before the first ';'
df_combined_v2 <- df_combined %>%
mutate(Metabolite.name.mod = str_extract(Metabolite.name, "^[^;]+"))
# Step 2: Group by 'Metabolite.name.mod' and calculate the average for all sample columns
df_combined_V2_averaged <- df_combined_v2 %>%
group_by(Metabolite.name.mod) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()
# Exclude metadata columns
metabolite_data <- df_combined_v2_averaged %>%
select(-Metabolite.name.mod, -Adduct.type, -Average.Rt.min.)
# Step 2: Group by 'Metabolite.name.mod' and calculate the average for all sample columns
df_combined_v2_averaged <- df_combined_v2 %>%
group_by(Metabolite.name.mod) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()
# Exclude metadata columns
metabolite_data <- df_combined_v2_averaged %>%
select(-Metabolite.name.mod, -Adduct.type, -Average.Rt.min.)
View(df_combined_v2_averaged)
View(df_combined)
# Step 2: Group by 'Metabolite.name.mod' and calculate the average for all sample columns
df_combined_v2_averaged <- df_combined_v2 %>%
group_by(Metabolite.name.mod) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()
str(df_combined)
str(df_combined_v2)
str(df_combined_v2_averaged)
# Exclude metadata columns
metabolite_data <- df_combined_v2_averaged %>%
select(-Metabolite.name.mod, -Average.Rt.min.)
df_combined_v2_averaged <- df_combined_v2_averaged %>%
mutate(Median_Intensity = apply(metabolite_data, 1, median, na.rm = TRUE))
# Sort and select the top metabolites by median intensity
highest_metabolites <- df_combined_v2_averaged %>%
arrange(desc(Median_Intensity)) %>%
select(Metabolite.name.mod, Median_Intensity)
# Print the top metabolites by median intensity
print(highest_metabolites)
View(df_combined_v2_averaged)
# Step 1: Extract group names from sample columns
sample_columns <- colnames(df_combined_v2_averaged)[3:(ncol(df_combined_v2_averaged) - 1)] # Exclude metadata columns
group_names <- sapply(sample_columns, function(x) strsplit(x, "_")[[1]][1])
# Step 2: Rename columns with group information
colnames(df_combined_v2_averaged)[3:(ncol(df_combined_v2_averaged) - 1)] <- group_names
# Step 3: Reshape the dataframe to long format
df_combined_v2_averaged_long <- df_combined_v2_averaged %>%
pivot_longer(
cols = -c(Metabolite.name.mod, Average.Rt.min., Median_Intensity),
names_to = "Group",
values_to = "Intensity"
)
# Step 4: Group by Metabolite.name.mod and Group, calculate mean intensity
group_summary <- df_combined_v2_averaged_long %>%
group_by(Group, Metabolite.name.mod) %>%
summarise(Mean_Intensity = mean(Intensity, na.rm = TRUE), .groups = "drop")
# Step 5: For each group, find the top 25 metabolites
top_25_metabolites <- group_summary %>%
group_by(Group) %>%
slice_max(order_by = Mean_Intensity, n = 50) %>%
arrange(Group, desc(Mean_Intensity))
# Step 6: View results
print(top_25_metabolites)
# Create a presence/absence matrix for metabolites across groups, dropping Mean_Intensity
presence_matrix <- top_25_metabolites %>%
select(Group, Metabolite.name.mod) %>%  # Only keep the relevant columns
mutate(Presence = 1) %>%  # Add a column for presence
pivot_wider(
names_from = Group,  # Groups as columns
values_from = Presence,  # Use presence/absence
values_fill = 0  # Fill missing values with 0
)
# Check the resulting matrix
print(presence_matrix)
# Convert to a matrix for visualization
presence_matrix_matrix <- presence_matrix %>%
select(-Metabolite.name.mod) %>%
as.matrix()
rownames(presence_matrix_matrix) <- presence_matrix$Metabolite.name.mod
library(ComplexUpset)
# Prepare data for UpSet plot
presence_matrix_for_upset <- presence_matrix %>%
pivot_longer(-Metabolite.name.mod, names_to = "Group", values_to = "Presence") %>%
filter(Presence == 1) %>%
mutate(Value = TRUE) %>%
select(-Presence) %>%
pivot_wider(names_from = Group, values_from = Value, values_fill = FALSE)
# Plot the UpSet
upset(
presence_matrix_for_upset,
colnames(presence_matrix_for_upset)[-1],
name = "Metabolite Groups",
base_annotations = list(
'Intersection size' = intersection_size(counts = TRUE)
)
)
# Visualize the presence/absence matrix using a heatmap
pheatmap(
presence_matrix_matrix,
cluster_rows = TRUE,  # Cluster metabolites
cluster_cols = TRUE,  # Cluster groups
color = colorRampPalette(c("white", "darkred"))(50),
main = "Presence of Top 25 Metabolites Across Groups",
show_rownames = FALSE,  # Hide row names
show_colnames = TRUE    # Show column (group) names
)
